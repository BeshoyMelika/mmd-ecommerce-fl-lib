type Query {
  cities: [City]
  areas(city_id: ID!): [Area]
  profile: User
  addresses(
    # Limits number of fetched elements.
    first: Int!

    # The offset from which elements are returned.
    page: Int
  ): UserAddressPaginator
  attributes: [Attribute]
  products(
    orderBy: [ProductsOrderByOrderByClause!]
    filter: ProductFilter

    # Limits number of fetched elements.
    first: Int!

    # The offset from which elements are returned.
    page: Int
  ): ProductPaginator
  relatedProducts(id: ID!): [Product]
  brands: [Brand!]
  categories: [Category!]
  stores: [Store!]
  cart: Cart
  shippingFees(input: OrderInput!): String
  orders(
    # Limits number of fetched elements.
    first: Int!

    # The offset from which elements are returned.
    page: Int
  ): OrderPaginator
  getOrderBillingStatus(merchant_reference: String): String
  getSavedCards: [SavedCard]
  sliders: [Slider!]
  ratings(
    product_id: ID!

    # Limits number of fetched elements.
    first: Int!

    # The offset from which elements are returned.
    page: Int
  ): RatingPaginator
  getVoucherByCode(code: String!): Voucher
  wishlist(
    # Limits number of fetched elements.
    first: Int!

    # The offset from which elements are returned.
    page: Int
  ): WishlistPaginator
}

type City {
  id: ID
  name: String
}

type Area {
  id: ID
  name: String
  city: City
}

type User {
  id: ID
  name: String
  email: String
  mobile: String
}

# A paginated list of UserAddress items.
type UserAddressPaginator {
  # Pagination information about the list of items.
  paginatorInfo: PaginatorInfo!

  # A list of UserAddress items.
  data: [UserAddress!]!
}

# Pagination information about the corresponding list of items.
type PaginatorInfo {
  # Total count of available items in the page.
  count: Int!

  # Current pagination page.
  currentPage: Int!

  # Index of first item in the current page.
  firstItem: Int

  # If collection has more pages.
  hasMorePages: Boolean!

  # Index of last item in the current page.
  lastItem: Int

  # Last page number of the collection.
  lastPage: Int!

  # Number of items per page in the collection.
  perPage: Int!

  # Total items available in the collection.
  total: Int!
}

type UserAddress {
  id: ID!
  first_name: String
  last_name: String
  area: Area!
  info: String!
  additional_info: String
  mobile: String
  lat: String
  lng: String
  isDefault: Boolean
}

type Attribute {
  id: ID
  name: String
  options: [String]
}

# Order by clause for the `orderBy` argument on the query `products`.
input ProductsOrderByOrderByClause {
  # The column that is used for ordering.
  field: ProductsOrderByColumn!

  # The direction that is used for ordering.
  order: SortOrder!
}

# Allowed column names for the `orderBy` argument on the query `products`.
enum ProductsOrderByColumn {
  ID
  NAME
}

# The available directions for ordering a list of records.
enum SortOrder {
  # Sort records in ascending order.
  ASC

  # Sort records in descending order.
  DESC
}

input ProductFilter {
  id: ID
  name: String
  sku: String
  category: [ID]
  brand: [ID]
  store: [ID]
}

# A paginated list of Product items.
type ProductPaginator {
  # Pagination information about the list of items.
  paginatorInfo: PaginatorInfo!

  # A list of Product items.
  data: [Product!]!
}

type Product {
  id: ID
  details: ProductData
  store: Store
  price: String
  available: Boolean
  ratings: [Rating]
  averageRating: String
  min_quantity: String
  max_quantity: String
  step: String
}

type ProductData {
  name: String
  sku: String
  description: String
  brand: Brand!
  category: Category!
  media: [Media]
  cover: Media
  unit: Unit
}

type Brand {
  id: ID
  name: String
}

type Category {
  id: ID
  name: String
  cover: Media
  children: [Category]
}

type Media {
  name: String
  mime_type: String
  url: String
}

type Unit {
  id: ID
  name: String
}

type Store {
  id: ID
  name: String
}

type Rating {
  rating: Int
  review: String
  user: User
  product: Product
}

type Cart {
  items: [CartItem]
  total: String
}

type CartItem {
  product: Product
  quantity: Int
  available: Boolean
}

input OrderInput {
  address_id: ID
  voucher_id: ID
}

# A paginated list of Order items.
type OrderPaginator {
  # Pagination information about the list of items.
  paginatorInfo: PaginatorInfo!

  # A list of Order items.
  data: [Order!]!
}

type Order {
  id: ID
  address: OrderAddress
  total: String
  payment_type: String
  items: [OrderItem]
}

type OrderAddress {
  id: ID!
  first_name: String
  last_name: String
  info: String
  additional_info: String
  mobile: String
  lat: String
  lng: String
}

type OrderItem {
  quantity: String
  price: String
  product: Product
}

type SavedCard {
  id: ID
  card_holder_name: String
  card_number: String
  payment_option: String
  expiry_date: String
  token_name: String
}

type Slider {
  id: ID
  title: String
  description: String
  link: String
  cover: Media
}

# A paginated list of Rating items.
type RatingPaginator {
  # Pagination information about the list of items.
  paginatorInfo: PaginatorInfo!

  # A list of Rating items.
  data: [Rating!]!
}

type Voucher {
  id: ID
  code: String
  discount: Int
  discount_type: String
}

# A paginated list of Wishlist items.
type WishlistPaginator {
  # Pagination information about the list of items.
  paginatorInfo: PaginatorInfo!

  # A list of Wishlist items.
  data: [Wishlist!]!
}

type Wishlist {
  product: Product
}

type Mutation {
  login(input: LoginInput!): AuthPayload!
  forgetPassword(email: String!): Boolean!
  resetPassword(input: ResetPasswordInput!): Boolean!
  register(input: RegisterInput!): User!
  refreshToken(token: String!): AuthPayload!
  logout: Boolean
  createAddress(input: AddressInput): Boolean
  updateAddress(id: ID, input: AddressInput): Boolean
  deleteAddress(id: ID): Boolean
  updateProfile(input: UpdateProfile): Boolean
  addToCart(items: [CartInput!]!): Boolean
  updateCart(items: [CartInput!]!): Boolean
  placeCashOnDeliveryOrder(input: OrderInput): Boolean
  placeCreditCardOrder(input: OrderInput): Tokenization
  placeSavedCreditCardOrder(
    input: OrderInput
    saved_card_id: ID!
    card_security_code: String!
  ): PurchaseParameters
  addReview(input: ReviewInput): Boolean
  addItemToWishlist(input: WishlistInput): Boolean
  deleteItemFromWishlist(input: WishlistInput): Boolean
}

input LoginInput {
  email: String!
  password: String!
  device_token: String!
}

type AuthPayload {
  token_type: String
  expires_in: Int
  access_token: String
  refresh_token: String
}

input ResetPasswordInput {
  email: String!
  new_password: String!
  token: String!
}

input RegisterInput {
  name: String!
  email: String!
  password: String!
  password_confirmation: String!
}

input AddressInput {
  first_name: String!
  last_name: String!
  area_id: ID!
  info: String!
  additional_info: String
  mobile: String
  lat: String
  lng: String
  isDefault: Boolean
}

input UpdateProfile {
  name: String
  mobile: String
}

input CartInput {
  product_id: ID!
  quantity: Int!
}

type Tokenization {
  merchant_identifier: String
  access_code: String
  currency: String
  language: String
  service_command: String
  return_url: String
  merchant_reference: String
  signature: String
}

type PurchaseParameters {
  merchant_identifier: String
  access_code: String
  currency: String
  language: String
  command: String
  return_url: String
  customer_ip: String
  token_name: String
  merchant_reference: String
  customer_email: String
  remember_me: String
  amount: String
  card_security_code: String
}

input ReviewInput {
  product_id: Int!
  rating: Int!
  review: String
}

input WishlistInput {
  product_id: Int!
}

# Pagination information about the corresponding list of items.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String

  # Total number of node in connection.
  total: Int

  # Count of nodes in current request.
  count: Int

  # Current page of request.
  currentPage: Int

  # Last page in connection.
  lastPage: Int
}

# Allows ordering a list of records.
input OrderByClause {
  # The column that is used for ordering.
  field: String!

  # The direction that is used for ordering.
  order: SortOrder!
}

# Specify if you want to include or exclude trashed results from a query.
enum Trashed {
  # Only return trashed results.
  ONLY

  # Return both trashed and non-trashed results.
  WITH

  # Only return non-trashed results.
  WITHOUT
}
